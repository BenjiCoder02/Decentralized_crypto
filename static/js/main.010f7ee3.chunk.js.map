{"version":3,"sources":["Constants/Constants.js","Graphs/ChartConfig.js","Graphs/PlotChart.js","Coin.jsx","CoinsList/CoinsList.js","App.js","index.js"],"names":["BASE_URL","ALL_COINS","GET_COIN_HISTORICAL_DATA","CHART_CONFIG_DEFAULTS","label","undefined","backgroundColor","color","borderColor","fillColor","strokeColor","highlightFill","highlightStroke","data","OPTIONS","Object","freeze","scales","yAxes","grid","drawBorder","ticks","beginAtZero","fontSize","xAxes","PlotChart","props","name","id","URL","replace","useState","labels","setLabels","chartData","setChartData","fillData","useCallback","axios","get","then","res","prices","arrayOfChartData","labelArray","i","length","currentData","newDate","Date","formatDate","getHours","getSeconds","push","prevState","catch","err","console","error","useEffect","datasetIdKey","datasets","options","Coin","image","symbol","price","volume","priceChange","marketCap","last_updated","isActive","setIsActive","RenderPrice","className","toFixed","handleMouseHover","e","element","target","hoveredElement","document","getElementById","classList","add","handleMouseLeave","remove","setChartDataForCoin","chartdata","RenderChart","onMouseEnter","onMouseLeave","src","alt","toLocaleString","CoinsList","coins","setCoins","search","setSearch","setError","intervalID","setIntervalID","getCryptoData","interval","setInterval","clearInterval","handleChange","value","filteredCoins","filter","coin","toLowerCase","includes","toLocaleLowerCase","RenderAllCoins","map","market_cap","current_price","price_change_percentage_24h","total_volume","RenderErrorMessage","type","placeholder","onChange","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.010f7ee3.chunk.js","sourcesContent":["const BASE_URL = 'https://api.coingecko.com/api/v3/coins';\n\nexport const ALL_COINS = `${BASE_URL}/markets?vs_currency=usd&order=market_cap_desc&per_page=8&page=1&sparkline=false`;\nexport const GET_COIN_HISTORICAL_DATA = `${BASE_URL}/{coinId}/market_chart?vs_currency=usd&days=1&interval=hourly`;\n","export const CHART_CONFIG_DEFAULTS = {\n\n    label: undefined,\n    backgroundColor: 'white',\n    color: 'white',\n    borderColor: 'white',\n    fillColor: \"rgba(220,220,220,0.5)\",\n    strokeColor: \"rgba(220,220,220,0.8)\",\n    highlightFill: \"rgba(220,220,220,0.75)\",\n    highlightStroke: \"rgba(220,220,220,1)\",\n    data: null,\n};\n\nexport const OPTIONS = Object.freeze({\n    scales: {\n        yAxes: {\n            grid: {\n                drawBorder: true,\n                color: '#FFFFFF',\n            },\n            ticks: {\n                beginAtZero: true,\n                color: 'white',\n                fontSize: 12,\n            }\n        },\n        xAxes: {\n            grid: {\n                drawBorder: true,\n                color: '#FFFFFF',\n\n            },\n            ticks: {\n                beginAtZero: true,\n                color: 'white',\n                fontSize: 12,\n            }\n        },\n    }\n});","import axios from 'axios';\nimport 'chart.js/auto';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Chart, Line } from 'react-chartjs-2';\nimport { GET_COIN_HISTORICAL_DATA } from '../Constants/Constants';\nimport { CHART_CONFIG_DEFAULTS, OPTIONS } from './ChartConfig';\n\nfunction PlotChart(props) {\n\n    const { name, id } = props;\n    const URL = GET_COIN_HISTORICAL_DATA.replace('{coinId}', id);\n    const [labels, setLabels] = useState([]);\n    const [chartData, setChartData] = useState([]);\n\n    const fillData = useCallback(() => {\n        axios.get(URL).then((res) => {\n            const { prices } = res.data;\n            const arrayOfChartData = [];\n            const labelArray = [];\n\n            for (let i = 0; i < prices.length; i++) {\n                let currentData = CHART_CONFIG_DEFAULTS;\n                const newDate = new Date(prices[i][0]);\n                const formatDate = `${newDate.getHours()}:${newDate.getSeconds()}`\n                labelArray.push(formatDate);\n                currentData.id = prices[i][1];\n                currentData.label = formatDate;\n                currentData.data = prices;\n                arrayOfChartData.push(currentData);\n            };\n\n            setLabels(prevState => [...prevState, ...labelArray]);\n            setChartData(prevState => [...prevState, ...arrayOfChartData]);\n        }).catch(err => { console.error(err) });\n    }, [URL])\n\n    useEffect(() => {\n        fillData();\n    }, []);\n\n    return (\n        <Line datasetIdKey={name}\n            data={{\n                labels: labels,\n                datasets: chartData,\n            }}\n            options={OPTIONS}\n        />\n    );\n}\n\nexport default PlotChart;","import React, { useCallback, useState } from 'react';\n\nimport './Coin.css';\nimport PlotChart from './Graphs/PlotChart';\n\nconst Coin = (({ name, id, image, symbol, price, volume, priceChange, marketCap, last_updated }) => {\n    const [isActive, setIsActive] = useState(false);\n    const [chartData, setChartData] = useState([]);\n    const [labels, setLabels] = useState([]);\n\n    const RenderPrice = useCallback(({ price }) => {\n        if (price < 0) {\n            return (\n                <p className=\"coin-percent red\">{priceChange.toFixed(2)}%</p>\n            );\n        }\n\n        return (\n            <p className=\"coin-percent green\">{priceChange.toFixed(2)}%</p>\n        )\n    }, [priceChange]);\n\n    const handleMouseHover = useCallback((e) => {\n        const element = e.target.id;\n        setIsActive(true);\n        const hoveredElement = document.getElementById(`${element}-chart`);\n        hoveredElement?.classList.add('hover');\n    }, []);\n\n    const handleMouseLeave = useCallback((e) => {\n        const element = e.target.id;\n        setIsActive(false);\n        const hoveredElement = document.getElementById(`${element}-chart`);\n        hoveredElement?.classList.remove('hover');\n    }, []);\n\n    const setChartDataForCoin = useCallback((chartdata, labels) => {\n        setChartData(prevState => [...prevState, ...chartdata]);\n        setLabels(prevState => [...prevState, labels]);\n    }, [])\n\n    const RenderChart = useCallback(() => {\n        if (!isActive) {\n            return null;\n        }\n\n        return (\n            <PlotChart\n                name={name}\n                id={id}\n                last_updated={last_updated}\n                setChartDataForCoin={setChartDataForCoin}\n                chartData={chartData}\n                labels={labels}\n            />\n        );\n    }, [chartData, id, isActive, labels, last_updated, name, setChartDataForCoin]);\n\n    return (\n        <div className=\"coin-container\">\n            <div className=\"coin-row\">\n                <div className=\"coin\">\n                    <div\n                        className={`coin-info ${name}`}\n                        id={`${name}-chart`}\n                        onMouseEnter={handleMouseHover}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <img src={image} alt=\"crypto\" id={name} className=\"coin-hover-effect\" />\n                        <div className=\"chart-container\">\n                            <RenderChart />\n                        </div>\n                    </div>\n                    <h1>{name}</h1>\n                    <p className=\"coin-symbol\">{symbol}</p>\n\n                </div>\n                <div className=\"coin-data\">\n                    <p className=\"coin-price\">${price}</p>\n                    <p className=\"coin-volume\">${volume.toLocaleString()}</p>\n                    <RenderPrice\n                        price={price}\n                    />\n                    <p className=\"coin-marketcap\">\n                        Mkt Cap: ${marketCap.toLocaleString()}\n                    </p>\n                </div>\n            </div>\n        </div>\n    )\n})\n\nexport default Coin","import React, { useCallback, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Coin from '../Coin';\nimport { ALL_COINS } from '../Constants/Constants';\n\nconst DATA_FETCH_INTERVAL = 60000;\n\nfunction CoinsList() {\n    const [coins, setCoins] = useState([]);\n    const [search, setSearch] = useState('');\n    const [error, setError] = useState(false);\n    const [intervalID, setIntervalID] = useState(null);\n\n    const getCryptoData = useCallback(() => {\n        axios.get(ALL_COINS).then((res) => {\n            setCoins(res.data)\n        })\n            .catch((error) => {\n                console.error(`Error on request ${ALL_COINS}: ${error}`);\n                setError(true);\n            });\n    }, [setCoins]);\n\n    useEffect(() => {\n        getCryptoData();\n        const interval = setInterval(function () {\n            getCryptoData();\n        }, DATA_FETCH_INTERVAL);\n        setIntervalID(interval);\n\n        return () => clearInterval(intervalID);\n    }, [getCryptoData]);\n\n    const handleChange = useCallback((e) => {\n        setSearch(e.target.value)\n    }, [setSearch]);\n\n    const filteredCoins = useCallback(() =>\n        coins.filter(coin =>\n            coin.name.toLowerCase()\n                .includes(search.toLocaleLowerCase())), [coins, search]);\n\n    const RenderAllCoins = useCallback(() => {\n        const coins = filteredCoins();\n        return coins.map((coin) => {\n            return (\n                <Coin\n                    key={coin.id}\n                    id={coin.id}\n                    name={coin.name}\n                    image={coin.image}\n                    symbol={coin.symbol}\n                    marketCap={coin.market_cap}\n                    price={coin.current_price}\n                    priceChange={coin.price_change_percentage_24h}\n                    volume={coin.total_volume}\n                    last_updated={coin.last_updated}\n                />\n            )\n        })\n    }, [filteredCoins]);\n\n    const RenderErrorMessage = useCallback(() => {\n        if (!error) {\n            return null;\n        }\n\n        return <h1>There was an error fetching data, please try refreshing the page.</h1>;\n    }, [error])\n\n    return (\n        <div className=\"coin-app\">\n            <div className=\"coin-search\">\n                <h1 className=\"coin-text\">\n                    <i className=\"fab fa-dyalog\"></i>\n                    &nbsp;DECENTRALIZED\n                </h1>\n                <form>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        className=\"coin-input\"\n                        onChange={handleChange}\n                    />\n                </form>\n            </div>\n            <RenderErrorMessage />\n            <RenderAllCoins />\n        </div>\n    );\n}\n\nexport default CoinsList;","import React from 'react'\nimport './App.css';\nimport CoinsList from './CoinsList/CoinsList';\n\n\nfunction App() {\n  return (\n    <CoinsList />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}